?order
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
test1[[1]]
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1
test1[1]
test1[2]
test1[[1]]
test1[[2]]
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = T, verbose = F)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
warnings()
test1[2]
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, steps, stepwise = T, verbose = F)
test1[1]
test1 = hierarchical_reg(test_reg, steps, stepwise = F, verbose = F)
test1[1]
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
test1[1]
test1[2]
as.character(test_reg$terms)[3]
strsplit(as.character(test_reg$terms)[3], " \\+ ")
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
?subset
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
?startsWith
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = F)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
lm = test_reg
std = T
semi = T
partial = T
CI = F
CL = .95
verbose = F
correlations = F
warn = T
if(!is.numeric(CL) | CL > 1 | CL <= 0) stop("Confidence Level (CL) needs to be a numeric value between 0 and 1.")
dv = as.character(lm$terms)[2]
iv = as.character(lm$terms)[3]
summ_lm = summary(lm)
lm_coef = data.frame(summ_lm$coefficients)
names(lm_coef) = c("B", "S.E.", "t", "p.val")
for_cors = data.frame(lapply(lm$model, function(x) { x = as.numeric(x); return(x) }))
cors = stats::cor(for_cors)
if(std) {
lm_stdzd = summary(lm(eval(parse(text=paste(dv, "~", iv, collapse =" + "))),
data.frame(lapply(lm$model, FUN = function(x) {
if(is.numeric(x)) scale(x)
if(is.factor(x)) scale(as.numeric(x))
return(x)})
)))
lm_coef$Beta = data.frame(lm_stdzd$coefficients)$Estimate
lm_coef$Beta[1] = NA
lm_coef = lm_coef[,c("B", "S.E.", "Beta", "t", "p.val")]
}
View(lm_coef)
if(semi & nrow(lm_coef) > 2) {
lm_coef$semi = NA_real_
for(x in strsplit(iv, " \\+ ")) {
lm_coef$semi[startsWith(rownames(lm_coef), x)] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~ .")),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
}
for(x in 2:nrow(lm_coef)) if(lm_coef$B[x] < 0 ) lm_coef$semi[x] = -1*lm_coef$semi[x]
} else if(semi & warn) warning("Semi-partial correlations can only be obtained if more than one predictor is in the model. \n\t Semi-partial correlations were not computed...")
if(semi & nrow(lm_coef) > 2) {
lm_coef$semi = NA_real_
for(x in strsplit(iv, " \\+ ")) {
lm_coef$semi[startsWith(rownames(lm_coef), x)] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~ .")),
data = data.frame(lm$model[,!names(lm$model) %in% x])))$r.squared)
}
for(x in 2:nrow(lm_coef)) if(lm_coef$B[x] < 0 ) lm_coef$semi[x] = -1*lm_coef$semi[x]
} else if(semi & warn) warning("Semi-partial correlations can only be obtained if more than one predictor is in the model. \n\t Semi-partial correlations were not computed...")
lm$model
lm_coef$semi = NA_real_
View(lm_coef)
x
for(x in strsplit(iv, " \\+ ")) {
print(x)
lm_coef$semi[startsWith(rownames(lm_coef), x)] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~ .")),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
}
for(x in list(strsplit(iv, " \\+ "))) {
print(x)
lm_coef$semi[startsWith(rownames(lm_coef), x)] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~ .")),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
}
for(x in unlist(strsplit(iv, " \\+ "))) {
print(x)
lm_coef$semi[startsWith(rownames(lm_coef), x)] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~ .")),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
}
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
if(!is.numeric(CL) | CL > 1 | CL <= 0) stop("Confidence Level (CL) needs to be a numeric value between 0 and 1.")
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
summ_lm = summary(lm)
lm_coef = data.frame(summ_lm$coefficients)
summ_lm = summary(lm)
lm_coef = data.frame(summ_lm$coefficients)
names(lm_coef) = c("B", "S.E.", "t", "p.val")
for_cors = data.frame(lapply(lm$model, function(x) { x = as.numeric(x); return(x) }))
cors = stats::cor(for_cors)
if(std) {
lm_stdzd = summary(lm(eval(parse(text=paste(dv, "~", x_term, collapse =" + "))),
data.frame(lapply(lm$model, FUN = function(x) {
if(is.numeric(x)) scale(x)
if(is.factor(x)) scale(as.numeric(x))
return(x)})
)))
lm_coef$Beta = data.frame(lm_stdzd$coefficients)$Estimate
lm_coef$Beta[1] = NA
lm_coef = lm_coef[,c("B", "S.E.", "Beta", "t", "p.val")]
}
if(semi & nrow(lm_coef) > 2) {
lm_coef$semi = NA_real_
for(x in ivs) {
#print(x)
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~", x_term)),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
}
# stop("breaks here")
for(x in 2:nrow(lm_coef)) if(lm_coef$B[x] < 0 ) lm_coef$semi[x] = -1*lm_coef$semi[x]
} else if(semi & warn) warning("Semi-partial correlations can only be obtained if more than one predictor is in the model. \n\t Semi-partial correlations were not computed...")
lm_coef$semi = NA_real_
x = ivs[1]
#print(x)
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(stats::as.formula(paste(dv, "~", x_term)),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
!names(lm$model) %in% x
lm$model[,!names(lm$model) %in% x]
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste(ivs[ivs != x], collapse = "+")
paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste(ivs[ivs != x], collapse = " + ")
eval(parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))))
summary(stats::lm(eval(parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model[,!names(lm$model) %in% x]))$r.squared
sqrt(summ_lm$r.squared -
summary(stats::lm(eval(parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model[,!names(lm$model) %in% x]))$r.squared)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))
eval(parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
parse(text=paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))
sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))
as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + "))))
as.formula(sprintf(paste(dv, "~", paste(ivs, collapse = " + "))))
lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
x=ivs[2]
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
x=ivs[3]
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
View(lm_coef)
x=ivs[4]
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
x=ivs[5]
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
x=ivs[6]
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
View(lm_coef)
for(x in ivs) {
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
stop("breaks here")
}
for(x in ivs) {
# cat(paste(x, "\n"))
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(as.formula(sprintf(paste(dv, "~", paste(ivs[ivs != x], collapse = " + ")))),
data = lm$model))$r.squared)
#stop("breaks here")
}
for(x in 2:nrow(lm_coef)) if(lm_coef$B[x] < 0 ) lm_coef$semi[x] = -1*lm_coef$semi[x]
View(lm_coef)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste(dv, "~", paste0(ivs[ivs != x], collapse = " + "))))
paste(dv, "~", paste0(ivs[ivs != x], collapse = " + "))
parse(text=paste(dv, "~", paste0(ivs[ivs != x], collapse = " + ")))
eval(parse(text=paste(dv, "~", paste0(ivs[ivs != x], collapse = " + "))))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = as.formula(paste(dv, "~", tmp_x_term))
as.formula(paste(dv, "~", tmp_x_term))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
parse(text=paste(dv, "~", tmp_x_term))
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = parse(text=paste(dv, "~", tmp_x_term))
stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = parse(text=paste(dv, "~", tmp_x_term))
# stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = eval(parse(text=paste(dv, "~", tmp_x_term)))
# stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = eval(parse(text=paste(dv, "~", tmp_x_term)))
# stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
for(x in 2:nrow(lm_coef)) if(lm_coef$B[x] < 0 ) lm_coef$semi[x] = -1*lm_coef$semi[x]
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
paste0(ivs[ivs != x], collapse = " + ")
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
paste(dv, "~", tmp_x_term)
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = eval(parse(text=paste(dv, "~", tmp_x_term)))
stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = eval(parse(text=paste(dv, "~", tmp_x_term)))
#stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
ivs = unlist(strsplit(x_term, " \\+ "))
for(x in ivs) {
# cat(paste(x, "\n"))
tmp_x_term = paste0(ivs[ivs != x], collapse = " + ")
formul = eval(parse(text=paste(dv, "~", tmp_x_term)))
#stop("breaks here")
lm_coef$semi[startsWith(rownames(lm_coef), x)][1] =
sqrt(summ_lm$r.squared -
summary(stats::lm(formul,
data = lm$model))$r.squared)
}
rm(for_cors, lm, lm_coef, lm_stdzd, summ_lm, test1, CI, CL, correlations, dv, formul, iv, ivs, partial, semi, std, tmp_x_term, verbose, warn, x, x_term)
rm(cors)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
test1 = hierarchical_reg(test_reg, stepwise = F, verbose = T)
test1 = lm_summarize(test_reg)
View(test1)
test_reg2 = lm(variet90 ~ cenhod90, df_PSY631Data)
lm_summarize(test_reg2)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
test_reg2 = lm(variet90 ~ cenhod90, df_PSY631Data)
lm_summarize(test_reg2)
hierarchical_reg(test_reg)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
hierarchical_reg(test_reg, steps)
hierarchical_reg(test_reg, steps, stepwise = T)
usethis::use_testthat()
usethis::use_test()
?lm
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
?warning
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, stepwise = T, verbose = T)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T)
source("~/GitHub/puRduePsych/R/hierarchical_reg.R", echo=TRUE)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = T, steps_verbose = F)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F, steps_verbose = t)
hierarchical_reg(test_reg, steps, stepwise = T, verbose = F, steps_verbose = T)
?stats::as.formula
?pf
