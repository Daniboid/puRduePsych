sim_dat_lm = function (lm,
n_forSim=NULL){
warning("This function doesn't work yet, and has not been fully tested...")
warning("This function assumes all numeric variables in the model are normally distributed, and the same number of observations of all factor (nominal and ordinal) variables.")
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else df_sim[,iv] = lm$model[,iv] # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
return(df_sim)
}
fake = sim_dat_lm(lm, n_forSims)               #generate a fake dataset
lm_tmp = suppressWarnings(suppressMessages(lm(lm$call$formula,
data = fake)))
coefs = data.frame(summary(lm_tmp)$coefficients)
colnames(coefs) = c("est", "se","t","p")
return(coefs$p < alpha)
}
# close(pb)
parallel::stopCluster(cl)
return(colMeans(signif))
}
sim_pow_lm(lm)
for_return = coefs$p < alpha
names(for_return) = rownames(coefs)
return(for_return)
sim_pow_lm = function (lm,
n_forSims=NULL,
n.sims=10000,
alpha=.05){
cl = parallel::makeCluster(parallel::detectCores())
doSNOW::registerDoSNOW(cl)
# pb = txtProgressBar(min = 1, max = n.sims, style = 3)
# progress <- function(n) setTxtProgressBar(pb, n)
# opts <- list(progress=progress)
signif = foreach (s = 1:n.sims, .combine = rbind #, .options.snow=opts
) %dopar% {
sim_dat_lm = function (lm,
n_forSim=NULL){
warning("This function doesn't work yet, and has not been fully tested...")
warning("This function assumes all numeric variables in the model are normally distributed, and the same number of observations of all factor (nominal and ordinal) variables.")
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else df_sim[,iv] = lm$model[,iv] # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
return(df_sim)
}
fake = sim_dat_lm(lm, n_forSims)               #generate a fake dataset
lm_tmp = suppressWarnings(suppressMessages(lm(lm$call$formula,
data = fake)))
coefs = data.frame(summary(lm_tmp)$coefficients)
colnames(coefs) = c("est", "se","t","p")
for_return = coefs$p < alpha
names(for_return) = rownames(coefs)
return(for_return)
}
# close(pb)
parallel::stopCluster(cl)
return(colMeans(signif))
}
sim_pow_lm(lm)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall)
determine_n_lm(lm_overall, "age94")
sim_dat_lm(lm_overall, 100)
n_forSim = 100
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else df_sim[,iv] = lm$model[,iv] # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
lm$model[,iv]
table(lm$model[,iv])
table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio = as.list(table(lm$model[,iv])/sum(table(lm$model[,iv])))
name(tmp_ratio)
names(tmp_ratio)
rep()
?rep
rep(names(tmp_ratio),round(tmp_ratio*n_forSim))
tmp_ratio*n_forSim
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio*n_forSim
rep(names(tmp_ratio),round(tmp_ratio*n_forSim))
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall)
determine_n_lm(lm_overall, "age94")
warnings()
determine_n_lm(lm_overall, "age94")
tmp_vect  = rep(names(tmp_ratio),round(tmp_ratio*n_forSim))
n_forSim = 70
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio),round(tmp_ratio*n_forSim))
iv="parent90"
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio), round(tmp_ratio*n_forSim))
iv="cenhod90"
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio), round(tmp_ratio*n_forSim))
sim_dat_lm = function (lm,
n_forSim=NULL){
warning("This function has not been fully tested...")
warning("This function assumes all numeric variables in the model are normally distributed, and the same ratio of observations of all factor (nominal and ordinal) variables.")
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(max(tmp_ratio)),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = tmp_vect
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
return(df_sim)
}
sim_dat_lm(lm_overall)
sim_dat_lm(lm_overall, 100)
n_forSim = 100
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(max(tmp_ratio)),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = tmp_vect
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(max(tmp_ratio)),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = tmp_vect
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
is.numeric(lm$model[,iv])
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
tmp_vect
length(tmp_vect) < nrow(df_sim)
max(tmp_ratio)
names(max(tmp_ratio))
max(tmp_ratio)
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
sim_dat_lm(lm_overall, 100)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = tmp_vect
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
iv="parent90"
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = tmp_vect
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
is.numeric(lm$model[,iv])
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_ratio
tmp_vect  = factor(rep(names(tmp_ratio), round(tmp_ratio*n_forSim)))
rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect))
c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
sim_dat_lm(lm_overall, 100)
determine_n_lm(lm_overall)
determine_n_lm(lm_overall, "age94")
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall, "age94")
current_power = sim_pow_lm(lm)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall)
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio), round(tmp_ratio*n_forSim))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = factor(tmp_vect)
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
View(df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
n_sims=10000,
n_sims=10000
alpha=.05
n_step=1
desired_power=.8
verbose=T
fake = sim_dat_lm(lm, n_forSims)               #generate a fake dataset
fake = sim_dat_lm(lm, n_forSim)               #generate a fake dataset
lm_tmp = suppressWarnings(suppressMessages(lm(lm$call$formula,
data = fake)))
coefs = data.frame(summary(lm_tmp)$coefficients)
colnames(coefs) = c("est", "se","t","p")
for_return = coefs$p < alpha
names(for_return) = rownames(coefs)
return(for_return)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall)
warnings()
current_power = sim_pow_lm(lm)[effect]
if(is.null(effect)) effect = ivs
effect=NULL
if(is.null(effect)) effect = ivs
current_power = sim_pow_lm(lm)[effect]
cat(paste("Current power for", names(current_power),"based on existing data is:", current_power, "\n\n"))
all_pwrs = sim_pow_lm(lm)
startsWith(names(all_pwrs), effect)
determine_n_lm = function(lm,
effect,#=NULL,
n_sims=10000,
alpha=.05,
n_step=1,
desired_power=.8,
verbose=T) {
post_hoc_sim_pow_lm = function (lm,
n_forSims=NULL,
n_sims=10000,
alpha=.05){
cl = parallel::makeCluster(parallel::detectCores())
doSNOW::registerDoSNOW(cl)
# pb = txtProgressBar(min = 1, max = n_sims, style = 3)
# progress <- function(n) setTxtProgressBar(pb, n)
# opts <- list(progress=progress)
signif = foreach (s = 1:n_sims, .combine = rbind #, .options.snow=opts
) %dopar% {
sim_dat_lm = function (lm,
n_forSim=NULL){
warning("This function doesn't work yet, and has not been fully tested...")
warning("This function assumes all numeric variables in the model are normally distributed, and the same number of observations of all factor (nominal and ordinal) variables.")
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
# if(is.null(effect)) effect = ivs
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio), round(tmp_ratio*n_forSim))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = factor(tmp_vect)
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
return(df_sim)
}
fake = sim_dat_lm(lm, n_forSim)               #generate a fake dataset
lm_tmp = suppressWarnings(suppressMessages(lm(lm$call$formula,
data = fake)))
coefs = data.frame(summary(lm_tmp)$coefficients)
colnames(coefs) = c("est", "se","t","p")
for_return = coefs$p < alpha
names(for_return) = rownames(coefs)
return(for_return)
}
# close(pb)
parallel::stopCluster(cl)
return(colMeans(signif))
}
current_power = sim_pow_lm(lm)[effect]
cat(paste("Current power for", names(current_power),"based on existing data is:", current_power, "\n\n"))
if (all(current_power >= desired_power)) {
cat("No need to calculate further\n\n")
return(nrow(lm$model))
} else {
n_obs = nrow(lm$model) + n_step
while (all(current_power < desired_power)){
if(verbose) cat(paste("\tChecking if a sample of", n_obs, "observations is enough to meet the deisred power...\n"))
current_power = sim_pow_lm(lm, n_obs)[effect]
n_obs = n_obs + n_step
}
if(verbose) cat(paste("A sample of", n_obs, "should be sufficient to power for the effect of",
effect, "at a power of", desired_power, ".\n"))
return(n_obs)
}
}
determine_n_lm = function(lm,
effect,#=NULL,
n_sims=10000,
alpha=.05,
n_step=1,
desired_power=.8,
verbose=T) {
post_hoc_sim_pow_lm = function (lm,
n_forSims=NULL,
n_sims=10000,
alpha=.05){
cl = parallel::makeCluster(parallel::detectCores())
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(min = 1, max = n_sims, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress=progress)
signif = foreach (s = 1:n_sims, .combine = rbind #, .options.snow=opts
) %dopar% {
sim_dat_lm = function (lm,
n_forSim=NULL){
warning("This function doesn't work yet, and has not been fully tested...")
warning("This function assumes all numeric variables in the model are normally distributed, and the same number of observations of all factor (nominal and ordinal) variables.")
if(is.null(n_forSim)) n_forSim = nrow(lm$model)
coefs = data.frame(summary(lm)$coefficients)
colnames(coefs) = c("est", "se","t","p")
coefs$sd = coefs$se * sqrt(nrow(lm$model))
dv = as.character(lm$terms)[2]
x_term = as.character(lm$terms)[3]
ivs = unlist(strsplit(x_term, " \\+ "))
# if(is.null(effect)) effect = ivs
observation = rep(1:n_forSim)     # Create a number of rows
df_sim = data.frame(observation)
for (iv in ivs){ # For each IV...
if (is.numeric(lm$model[,iv])) { # if it is numeric...
tmp_mu = mean(lm$model[,iv]) # calculate the mean...
tmp_sd = sd(lm$model[,iv])   # and standard deviation...
df_sim[,iv] = rnorm(n_forSim, tmp_mu, tmp_sd) # use those to generate a simulated sample...
} else {
tmp_ratio = table(lm$model[,iv])/sum(table(lm$model[,iv]))
tmp_vect  = rep(names(tmp_ratio), round(tmp_ratio*n_forSim))
if (length(tmp_vect) < nrow(df_sim)) tmp_vect = c(tmp_vect, rep(names(tmp_ratio[tmp_ratio == max(tmp_ratio)]),
nrow(df_sim) - length(tmp_vect)))
if(length(tmp_vect) > nrow(df_sim)) tmp_vect = tmp_vect[-length(tmp_vect)]
df_sim[,iv] = factor(tmp_vect)
} # otherwise assume the same number of nominal and ordinal observations in the simulated sample.
}
df_sim$perf_pred_dv = predict(lm, newdata=df_sim)
sd_resid  = sd(lm$residuals)
df_sim[,dv] <- rnorm(n_forSim,
mean(df_sim$perf_pred_dv),
sd_resid)
return(df_sim)
}
fake = sim_dat_lm(lm, n_forSim)               #generate a fake dataset
lm_tmp = suppressWarnings(suppressMessages(lm(lm$call$formula,
data = fake)))
coefs = data.frame(summary(lm_tmp)$coefficients)
colnames(coefs) = c("est", "se","t","p")
for_return = coefs$p < alpha
names(for_return) = rownames(coefs)
return(for_return)
}
# close(pb)
parallel::stopCluster(cl)
return(colMeans(signif))
}
current_power = sim_pow_lm(lm)[effect]
cat(paste("Current power for", names(current_power),"based on existing data is:", current_power, "\n\n"))
if (all(current_power >= desired_power)) {
cat("No need to calculate further\n\n")
return(nrow(lm$model))
} else {
n_obs = nrow(lm$model) + n_step
while (all(current_power < desired_power)){
if(verbose) cat(paste("\tChecking if a sample of", n_obs, "observations is enough to meet the deisred power...\n"))
current_power = sim_pow_lm(lm, n_obs)[effect]
n_obs = n_obs + n_step
}
if(verbose) cat(paste("A sample of", n_obs, "should be sufficient to power for the effect of",
effect, "at a power of", desired_power, ".\n"))
return(n_obs)
}
}
determine_n_lm(lm_overall, n_step = 5)
sim_dat_lm(lm_overall, 500)
post_hoc_sim_pow_lm(lm_overall, 500)
warnings()
post_hoc_sim_pow_lm(lm_overall, 5000)
post_hoc_sim_pow_lm(lm_overall, 50000)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall, n_step = 1000)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall, n_step = 1000)
is.null(effect)
exists(effect)
exists(effect)
effect
!effect
exists("effect")
if(!exists("lm")) stop("lm not defined.")
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
lm_overall = lm(variet94 ~ age94 + gender + parent90 + cenhod90 + open90 + consc90 + extra90 + agree90 + neuro90,
data=df_PSY631Data)
determine_n_lm(lm_overall, "age94")
warnings()
determine_n_lm(lm_overall, "age94", n_sims=100, n_step=100)
post_hoc_sim_pow_lm(lm_overall, 10000)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm()
determine_n_lm(lm_overall)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
determine_n_lm(lm_overall, "(Intercept)", n_step = 111)
warnings()
determine_n_lm(lm_overall, "(Intercept)", n_step = 1111)
source("~/GitHub/puRduePsych/R/sim_pow_lm.R", echo=TRUE)
?txtProgressBar
