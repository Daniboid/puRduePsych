)
)
print(step_output)
tmp_summ = lm_summarize(tmp_reg)
coefs_output[[s]] = tmp_summ
}
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(reg, steps)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
for(s in 1:length(steps)){
tmp_reg = lm(formula(paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste(step, "\n\tadding:", steps[s],"\n\n"))
print(summary(tmp_reg))
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
# add to output
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
print(step_output)
tmp_summ = lm_summarize(tmp_reg)
coefs_output[[s]] = tmp_summ
names(coefs_output)[s] = step
}
rownames(step_output) = 1:nrow(step_output)
return(step_output)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(reg, steps)
rm()
load("./data/ClassData.RData")
load("./data/ClassData.RData")
y=lm(variet94~gender+age94+wviq90+consc90+variet90, data=df_PSY631Data)
steps=list(c("gender","age94"), c("wviq90"), c("variet90", "consc90"))
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_summarize.R", echo=TRUE)
lm_stepwise(y, steps)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
tmp_reg = lm(formula(paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
s=1
tmp_reg = lm(formula(paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
mod = y
tmp_reg = lm(formula(paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
tmp_reg = lm(parse(paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
tmp_reg = lm(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))),
mod$model)
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
if(typeof(y) == "character"){
if(is.null(data)) stop("Data is required when y is specifying an outcome variable.")
if(!y %in% colnames(data)) stop("The outcome varaible is not in the data set.")
mod = lm(as.formula(paste(y, "~", paste(unlist(steps), sep=" + "))),
data)
} else if(typeof(y) != "list" | is.null(y$model)) {
stop("The `y` argument must either be a character string specifying the outcome or the full linear model from which the steps will be calculated.")
} else {
mod = y
y = as.character(y$call$formula)[2]
}
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + "))))
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste(step, "\n\tadding:", steps[s],"\n\n"))
print(summary(tmp_reg))
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
for(s in 1:length(steps)){
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste(step, "\n\tadding:", steps[s],"\n\n"))
print(summary(tmp_reg))
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
# add to output
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
print(step_output)
tmp_summ = lm_summarize(tmp_reg)
coefs_output[[s]] = tmp_summ
names(coefs_output)[s] = step
}
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
View(step_output)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
step_output = cbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
# Check for things that will cause errors
if(is.null(y) | is.null(steps)) stop("Both y and the steps need to be specified.")
if(typeof(steps) != "list") stop("`steps` must be a list of vectors containing variable names.")
if(length(steps) <= 1) stop("`steps` must contain more than 1 vector of variable names.")
if(typeof(y) == "character"){
if(is.null(data)) stop("Data is required when y is specifying an outcome variable.")
if(!y %in% colnames(data)) stop("The outcome varaible is not in the data set.")
mod = lm(as.formula(paste(y, "~", paste(unlist(steps), sep=" + "))),
data)
} else if(typeof(y) != "list" | is.null(y$model)) {
stop("The `y` argument must either be a character string specifying the outcome or the full linear model from which the steps will be calculated.")
} else {
mod = y
y = as.character(y$call$formula)[2]
}
if(!all(unlist(steps) %in% colnames(mod$model))) stop("Not all predictors are in the regression model.")
if(is.null(names(steps))) names(steps) = rep("", length(steps))
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
for(s in 1:length(steps)){
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste(step, "\n\tadding:", steps[s],"\n\n"))
print(summary(tmp_reg))
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
# add to output
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
print(step_output)
tmp_summ = lm_summarize(tmp_reg)
coefs_output[[s]] = tmp_summ
names(coefs_output)[s] = step
}
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
for(s in 1:length(steps)){
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste(step, "\n\tadding:", steps[s],"\n\n"))
#print(summary(tmp_reg))
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
# add to output
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
print(step_output)
tmp_summ = lm_summarize(tmp_reg)
print(tmp_summ)
coefs_output[[s]] = tmp_summ
names(coefs_output)[s] = step
}
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
mod = lm(variet94~gender+age94+variet90+consc90+neuro90+open90, df_PSY631Data)
steps
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
steps[[2]] = c("wviq90", "open90")
lm_stepwise(mod,steps)
mod$terms
mod = lm(variet94~gender+age94+variet90+consc90+open90+wviq90, df_PSY631Data)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
lm_stepwise(mod,steps)
# Get the output...
step_output = data.frame(
step = c(),
R_sq = c(),
R_sq_adj = c(),
mod_F = c(),
mod_df1 = c(),
mod_df2 = c(),
mod_sig = c(),
R_sq_change = c(),
change_F = c(),
change_df1 = c(),
change_sig = c()
)
prev_R_sq = 0
coefs_output = list()
for(s in 1:length(steps)){
tmp_reg = lm(eval(parse(text=paste(y, "~", paste(c(unlist(steps[1:s])), collapse =" + ")))),
mod$model)
tmp_reg_summ = summary(tmp_reg)
step = ifelse(names(steps)[s] != "",
names(steps)[s],
paste("Step", s))
cat(paste("\n", step, "\n\tAdding", paste(unlist(steps[s]), collapse = " & "),"to the model..\n\n"))
print(tmp_reg_summ$coefficients)
R_sq = tmp_reg_summ$r.squared
R_sq_adj = tmp_reg_summ$adj.r.squared
mod_F = tmp_reg_summ$fstatistic["value"]
mod_df1 = tmp_reg_summ$fstatistic["numdf"]
mod_df2 = tmp_reg_summ$fstatistic["dendf"]
mod_sig = pf(mod_F, mod_df1, mod_df2, lower.tail = F)
R_sq_change = R_sq - prev_R_sq
prev_R_sq = R_sq
change_df1 = length(steps[[s]])
change_F = (R_sq_change/(change_df1)) / ((1-R_sq)/mod_df2)
change_sig = pf(change_F, change_df1, mod_df2, lower.tail = F)
# add to output
step_output = rbind(step_output,
data.frame(
step,
R_sq,
R_sq_adj,
mod_F,
mod_df1,
mod_df2,
mod_sig,
R_sq_change,
change_F,
change_df1,
change_sig
)
)
tmp_summ = lm_summarize(tmp_reg)
print(tmp_summ)
coefs_output[[s]] = tmp_summ
names(coefs_output)[s] = step
}
source("~/GitHub/puRduePsych/R/lm_stepwise.R", echo=TRUE)
